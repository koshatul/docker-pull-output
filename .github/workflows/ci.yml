name: ci

on:
  push:
    branches:
      - master
      - gh-actions
    tags:
      - 'v*'
  pull_request:

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.30

  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go
      - name: set go env
        run: export PATH=${PATH}:`go env GOPATH`/bin
      - name: checkout
        uses: actions/checkout@v2
      - name: unit-test
        run: make test

  ci:
    name: ci
    runs-on: ubuntu-latest
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go
      - name: set go env
        run: export PATH=${PATH}:`go env GOPATH`/bin
      - name: checkout
        uses: actions/checkout@v2
      - name: make ci
        run: make ci

  env:
    name: env
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_REF: ${{ github.ref }}
        run: echo "$GITHUB_REF"

  release:
    name: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
      - name: Build project
        run: make archives
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset (darwin)
        id: upload-release-asset-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/archives/docker-pull-output-${{ env.RELEASE_VERSION }}-darwin-amd64.zip
          asset_name: docker-pull-output-${{ env.RELEASE_VERSION }}-darwin-amd64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (windows)
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/archives/docker-pull-output-${{ env.RELEASE_VERSION }}-windows-amd64.zip
          asset_name: docker-pull-output-${{ env.RELEASE_VERSION }}-windows-amd64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (linux)
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/archives/docker-pull-output-${{ env.RELEASE_VERSION }}-linux-amd64.zip
          asset_name: docker-pull-output-${{ env.RELEASE_VERSION }}-linux-amd64.zip
          asset_content_type: application/zip
